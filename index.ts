// package.json: "type": "module"
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

import fetch from 'node-fetch'; // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: npm install node-fetch

// 1) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
async function getAvailableModel() {
  try {
    const response = await fetch('http://localhost:11434/api/tags');
    const data = await response.json();
    
    if (data.models && data.models.length > 0) {
      console.log('Available models:', data.models.map(m => m.name));
      
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö)
      const preferredModels = [
        'llama3.1:8b', 'llama3:8b', 'llama2:7b', 
        'mistral:7b', 'gemma:7b', 'phi3:3.8b'
      ];
      
      for (const model of preferredModels) {
        if (data.models.some(m => m.name === model)) {
          return model;
        }
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ
      return data.models[0].name;
    }
    
    return null;
  } catch (error) {
    console.error('Error checking models:', error);
    return null;
  }
}

// 2) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Ollama ‡∏ú‡πà‡∏≤‡∏ô REST API
async function callOllamaAPI(model, prompt) {
  try {
    const response = await fetch('http://localhost:11434/api/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: model,
        prompt: prompt,
        stream: false, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ streaming ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ response ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        options: {
          temperature: 0.2,
          top_p: 0.9,
          max_tokens: 2000
        }
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.response;
  } catch (error) {
    console.error('Ollama API error:', error);
    throw error;
  }
}

// 3) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Tavily REST API
async function searchWithTavily(query, domains = []) {
  try {
    const response = await fetch('https://api.tavily.com/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ${process.env.TAVILY_API_KEY}'
      },
      body: JSON.stringify({
        query: query,
        max_results: 4,
        include_domains: domains.length > 0 ? domains : undefined,
        include_answer: false,
        include_raw_content: false
      })
    });

    if (!response.ok) {
      throw new Error(`Tavily API error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.results || [];
  } catch (error) {
    console.error("Tavily search error:", error);
    return [];
  }
}

// 4) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Embedding (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ RAG ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°)
async function createEmbedding(text, model = 'nomic-embed-text:latest') {
  try {
    const response = await fetch('http://localhost:11434/api/embeddings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: model,
        prompt: text
      })
    });

    if (!response.ok) {
      throw new Error(`Embedding error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.embedding;
  } catch (error) {
    console.error('Embedding error:', error);
    return null;
  }
}

// 5) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const availableModel = await getAvailableModel();
    
    if (!availableModel) {
      console.log('‚ùå No Ollama models found. Please pull a model first:');
      console.log('docker exec -it ollama ollama pull llama3:8b');
      return;
    }
    
    console.log('‚úÖ Using model:', availableModel);
    
    const question = "‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏ö‡∏¥‡∏î ‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö?";
    
    console.log("\n=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ===");
    console.log("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:", question);
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Tavily...");
    const searchResults = await searchWithTavily(question, ["https://www.agnoshealth.com/forums"]);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á context
    let context = "";
    if (searchResults.length > 0) {
      context = searchResults.map(result => 
        `‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${result.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${result.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤'}\nURL: ${result.url || '‡πÑ‡∏°‡πà‡∏°‡∏µ URL'}`
      ).join("\n---\n");
      
      console.log(`‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${searchResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    } else {
      context = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Tavily";
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Tavily");
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RAG
    const prompt = `ROLE: Health Information Assistant from Online Forum

CORE DIRECTIVES & SAFETY GUIDELINES:
- Helping community members navigate health discussions
- Facilitating knowledge sharing from forum conversations
- Connecting users with relevant community insights
**ALWAYS RECOMMEND**: Consulting qualified healthcare professionals for medical concerns
**NOT MEDICAL ADVICE**: Forum discussions are shared experiences, not professional medical advice


## CONTEXT FROM AGNOSHEALTH FORUM DISCUSSIONS:
${context || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡∏±‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏ô‡∏µ‡πâ https://www.agnoshealth.com/referral "}

## USER QUESTION:
${question}

## LANGUAGE & TONE REQUIREMENTS:
- Use clear, simple, and accessible Thai.
- Avoid technical medical jargon where possible.
- Maintain an empathetic, supportive, and respectful tone.
- Be professional yet approachable.
- Briefly summarize the potential causes or experiences mentioned in the CONTEXT.

## EXAMPLE OF AN IDEAL RESPONSE:
"Based on discussions in the Agnos Health forum about similar symptoms, some members have shared their experiences related to... [summarize relevant information from the context].
However, it's important to remember that this information is from community sharing and is not medical advice. These symptoms can be caused by a wide range of conditions, so for your safety and to get an accurate diagnosis, I strongly recommend consulting a doctor who can evaluate your specific situation."

**FINAL INSTRUCTION: Generate the response now, adhering to all rules above. YOU MUST RESPOND ENTIRELY IN THAI.Append the following to the response: "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏ô‡∏µ‡πâ https://www.agnoshealth.com/referral**`;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Ollama API
    console.log("\n=== ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ===");
    console.log("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢", availableModel);
    const answer = await callOllamaAPI(availableModel, prompt);
    
    console.log("\n" + "=".repeat(50));
    console.log("üìù ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:");
    console.log("=".repeat(50));
    console.log(answer);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
    if (searchResults.length > 0) {
      console.log("\n" + "=".repeat(50));
      console.log("üìö ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤:");
      console.log("=".repeat(50));
      searchResults.forEach((result, index) => {
        console.log(`${index + 1}. ${result.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}`);
        console.log(`   üîó ${result.url || '‡πÑ‡∏°‡πà‡∏°‡∏µ URL'}`);
        console.log('');
      });
    }
    
  } catch (error) {
    console.error("\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error.message);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    console.log("\n" + "=".repeat(50));
    console.log("üîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤");
    console.log("=".repeat(50));
    console.log("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ollama container:");
    console.log("   docker ps");
    console.log("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ollama API:");
    console.log("   curl http://localhost:11434/api/tags");
    console.log("3. ‡∏î‡∏∂‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà:");
    console.log("   docker exec -it ollama ollama pull llama3:8b");
    console.log("4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs:");
    console.log("   docker logs ollama");
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
await main();